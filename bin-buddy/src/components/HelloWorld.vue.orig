<template>
  <v-container>
    <!-- Gemeinde Auswahl -->
    <v-row class="text-center">
      <v-col cols="12">
        <v-autocomplete
          deletable-chips
          filled
          :items="municipalities"
          label="Gemeinde"
          v-model="municipality"
          @change="setHolidays(municipality)"
        ></v-autocomplete>
      </v-col>
    </v-row>
    <!-- Gemeinde Auswahl END -->
    <v-row v-if="municipality">
      Feiertage:
      <v-list-item>
        <v-list-item-content>
          <v-list-item-title v-for="holiday in holidays" :key="holiday.id">
            {{ holiday.name }}: {{ holiday.when }}
          </v-list-item-title>
        </v-list-item-content>
      </v-list-item>
    </v-row>
    <v-row>
      <v-col>
        <v-btn color="primary" elevation="2" outlined @click="addRow"
          >Neuer Eintrag</v-btn
        ></v-col
      >
    </v-row>

    <!-- FORMULAR -->
    <v-row>
      <v-form ref="form" v-model="valid" lazy-validation>
        <v-row v-for="row in formData['entries']" :key="row.id">
          <!-- Garbage Type -->
          <v-col>
            <v-select
              v-model="row.type"
              :items="garbageType"
              :rules="[(v) => !!v || 'Bitte einen Typ ausw채hlen.']"
              label="Typ"
              required
            ></v-select>
          </v-col>
          <!-- Garbage Type END -->
          <v-col>
            <v-checkbox
              v-model="row.isDateSeries"
              label="Entsorgungsserie?"
            ></v-checkbox>
          </v-col>
          <v-row>
            <!-- Date-Series -->
            <v-row v-if="row.isDateSeries">
              <v-col>
                <v-select
                  v-model="row.value"
                  :items="days"
                  attach
                  chips
                  label="Wann?"
                  multiple
                ></v-select>
                <v-text-field
                  v-model="row.repetition"
                  label="Wiederholung jede(n):"
                  type="number"
                  :rules="[numberRule]"
                ></v-text-field>
                <v-radio-group v-model="row.radioGroup">
                  <v-radio label="Tag(e)" value="days"></v-radio>
                  <v-radio label="Woche(n)" value="weeks"></v-radio>
                  <v-radio label="Monat(e)" value="months"></v-radio>
                  <v-radio label="Jahr(e)" value="years"></v-radio>
                </v-radio-group>
              </v-col>
            </v-row>
          </v-row>
          <!-- Date-Series END -->
          <v-row>
            <!-- Single Datetime -->
            <v-row v-if="!row.isDateSeries">
              <v-col>
                <v-date-picker
                  v-model="row.datePicker"
                  label="W채hle das Datum"
                ></v-date-picker>
              </v-col>
              <v-col>
                <v-time-picker
                  v-model="row.timePicker"
                  label="W채hle die Zeit"
                  format="24hr"
                ></v-time-picker>
              </v-col>
            </v-row>
          </v-row>
        </v-row>
        <!-- Single Datetime END -->
        <v-row>
          <v-col>
            <!-- Preview -->
            <v-textarea
              readonly
              filled
              label="Vorschau"
              auto-grow
              :value="JSON.stringify(formData)"
            >
              {{ formData }}</v-textarea
            ></v-col
          >
        </v-row>
        <!-- Preview END -->
        <v-btn
          :disabled="!valid"
          color="success"
          class="mr-4"
          @click="downloadAsCSV"
        >
          Download
        </v-btn>
        <v-btn color="error" class="mr-4" @click="reset"> Reset </v-btn>
      </v-form>
      <!-- FORMULAR END -->
    </v-row>
  </v-container>
</template>

<script>
import csvFile from "../assets/gemeinden.csv";
import axios from "axios";
import feiertage from "../assets/feiertage.csv";

export default {
  name: "HelloWorld",

  data: () => ({
<<<<<<< HEAD
    holidays: [],
    municipality: "",
    formData: [],
||||||| parent of 323f786 (Add submit calendar)
    formData: [],
=======
    formData: {entries: []},
>>>>>>> 323f786 (Add submit calendar)
    municipalities: [],
    valid: true,
    garbageType: [],
    picker: new Date(Date.now() - new Date().getTimezoneOffset() * 60000)
      .toISOString()
      .substr(0, 10),
    days: [
      "Montag",
      "Dienstag",
      "Mittwoch",
      "Donnerstag",
      "Freitag",
      "Samstag",
      "Sonntag",
    ],
    numberRule: (v) => {
      if (!v.trim()) return true;
      if (!isNaN(parseFloat(v)) && v > 0) return true;
      return "Anzahl muss eine positive Nummer sein";
    },
  }),
  methods: {
    getWasteTypes() {
      console.log("Get Waste types");
      const path = "http://localhost:5000/data/waste_types";
      axios
        .get(path)
        .then((res) => {
          for (const entry in res.data) {
            this.garbageType.push(res.data[entry]["de"]);
          }
          console.log(this.garbageType);
        })
        .catch((error) => {
          // eslint-disable-next-line
          console.error(error);
        });
    },
    addRow() {
      this.getWasteTypes();
      this.formData.entries.push({
        id: new Date().valueOf(),
        type: true,
        isDateSeries: true,
        value: null,
        repetition: "0",
        radioGroup: null,
        datePicker: "",
        timePicker: "",
      });
    },
    /* TODO: DOWNLOAD AS CSV */
    downloadAsCSV() {
      console.log("muni", this.municipality)
      this.formData.municipality = this.municipality;
      console.log("Download", JSON.stringify(this.formData));
      const path = 'http://localhost:5000/submit_calendar';
      axios.post(path, this.formData)
        .then((res) => {
          console.log(res);
        })
        .catch((error) => {
          // eslint-disable-next-line
          console.error(error);
        });
    },
    reset() {
      while (this.formData.length > 0) {
        this.formData.pop();
      }
      this.$refs.form.reset();
    },
    setHolidays(value) {
      this.holidays = [];
      let kanton = "";
      csvFile.forEach((el) => {
        if (el.offizieller_gemeindename === value) {
          kanton = el.kanton.slice(-2); /* To get the Kantonk체rzel */
          return;
        }
      });
      feiertage.forEach((e) => {
        if (e.nationwide) {
          this.holidays.push({
            id: e.id,
            when: new Date(e.start_date).toLocaleDateString("de-CH"),
            name: e.name_text,
          });
        } else {
          if (e.canton.includes(kanton)) {
            this.holidays.push({
              id: e.id,
              when: new Date(e.start_date).toLocaleDateString("de-CH"),
              name: e.name_text,
            });
          }
        }
      });
    },
  },
  created() {
    csvFile.forEach((element) => {
      this.municipalities.push(element.offizieller_gemeindename);
    });
  },
};
</script>
